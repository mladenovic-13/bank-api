// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: accounts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts(
  id, name, number, balance, currency, user_id, created_at, updated_at
)
VALUES($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, name, number, balance, currency, user_id, created_at, updated_at
`

type CreateAccountParams struct {
	ID        uuid.UUID
	Name      string
	Number    uuid.UUID
	Balance   int32
	Currency  Currency
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.ID,
		arg.Name,
		arg.Number,
		arg.Balance,
		arg.Currency,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Number,
		&i.Balance,
		&i.Currency,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :one
DELETE FROM accounts WHERE id=$1 AND  user_id=$2
RETURNING id, name, number, balance, currency, user_id, created_at, updated_at
`

type DeleteAccountParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteAccount(ctx context.Context, arg DeleteAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, deleteAccount, arg.ID, arg.UserID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Number,
		&i.Balance,
		&i.Currency,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, name, number, balance, currency, user_id, created_at, updated_at FROM accounts WHERE user_id=$1 AND id=$2
`

type GetAccountByIDParams struct {
	UserID uuid.UUID
	ID     uuid.UUID
}

func (q *Queries) GetAccountByID(ctx context.Context, arg GetAccountByIDParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByID, arg.UserID, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Number,
		&i.Balance,
		&i.Currency,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccounts = `-- name: GetAccounts :many
SELECT id, name, number, balance, currency, user_id, created_at, updated_at FROM accounts WHERE user_id=$1
`

func (q *Queries) GetAccounts(ctx context.Context, userID uuid.UUID) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccounts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Number,
			&i.Balance,
			&i.Currency,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
