// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(id, username, password, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, username, password, isadmin, created_at, updated_at
`

type CreateUserParams struct {
	ID        uuid.UUID
	Username  string
	Password  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Isadmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :one
DELETE FROM users WHERE id=$1
RETURNING id, username, password, isadmin, created_at, updated_at
`

func (q *Queries) DeleteUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Isadmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, password, isadmin, created_at, updated_at FROM users WHERE id=$1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Isadmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByIDAndUsername = `-- name: GetUserByIDAndUsername :one
SELECT id, username, password, isadmin, created_at, updated_at FROM users WHERE id=$1 AND username=$2
`

type GetUserByIDAndUsernameParams struct {
	ID       uuid.UUID
	Username string
}

func (q *Queries) GetUserByIDAndUsername(ctx context.Context, arg GetUserByIDAndUsernameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByIDAndUsername, arg.ID, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Isadmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password, isadmin, created_at, updated_at FROM users WHERE username=$1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Isadmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
