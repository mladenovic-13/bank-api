// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package database

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type Currency string

const (
	CurrencyEUR Currency = "EUR"
	CurrencyUSD Currency = "USD"
	CurrencyRSD Currency = "RSD"
)

func (e *Currency) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Currency(s)
	case string:
		*e = Currency(s)
	default:
		return fmt.Errorf("unsupported scan type for Currency: %T", src)
	}
	return nil
}

type NullCurrency struct {
	Currency Currency
	Valid    bool // Valid is true if Currency is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCurrency) Scan(value interface{}) error {
	if value == nil {
		ns.Currency, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Currency.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCurrency) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Currency), nil
}

type TransactionType string

const (
	TransactionTypeTRANSFER   TransactionType = "TRANSFER"
	TransactionTypePAYMENT    TransactionType = "PAYMENT"
	TransactionTypeWITHDRAWAL TransactionType = "WITHDRAWAL"
	TransactionTypeDEPOSIT    TransactionType = "DEPOSIT"
)

func (e *TransactionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionType(s)
	case string:
		*e = TransactionType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionType: %T", src)
	}
	return nil
}

type NullTransactionType struct {
	TransactionType TransactionType
	Valid           bool // Valid is true if TransactionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionType) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionType), nil
}

type Account struct {
	ID        uuid.UUID
	Name      string
	Number    uuid.UUID
	Balance   string
	Currency  Currency
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

type Transaction struct {
	ID              uuid.UUID
	SenderNumber    uuid.UUID
	ReceiverNumber  uuid.UUID
	Amount          string
	Currency        Currency
	TransactionType TransactionType
	CreatedAt       time.Time
}

type User struct {
	ID        uuid.UUID
	Username  string
	Password  string
	Isadmin   bool
	CreatedAt time.Time
	UpdatedAt time.Time
}
